@page "/login"
@using MovieRental.Frontend.Components.Pages.LayoutsPages
@using MovieRental.Frontend.Dtos
@using MovieRental.Frontend.Models
@inject UserService UserService
@rendermode InteractiveServer


<CascadingAuthenticationState>

	<PageTitle>Login</PageTitle>
	<nav>
		<NavMenu></NavMenu>
	</nav>

	<main>
		<h1>Login</h1>
		<div class="@LoadingOverlayClass">
						<div class="spinner-border text-light" role="status">
							<span class="sr-only"></span>
						</div>
					</div>
		<AuthorizeView>
			<Authorized>
				<p>You are already logged in. If you want to login with another account, please logout first.</p>
			</Authorized>
			<NotAuthorized>
				<EditForm FormName="LoginForm" Model="@LoginModel" OnValidSubmit="HandleSubmitAsync"
				          Context="editContextLogin" Enhance>
					<DataAnnotationsValidator/>
					<ValidationSummary/>

					<div class="mb-3">
						<label for="username" class="form-label">Username:</label>
						<InputText class="form-control" id="username" @bind-Value="@LoginModel.Username"
						           autocomplete="username" placeholder="Enter your username"></InputText>
						<ValidationMessage For="@(() => LoginModel.Username)"/>
					</div>

					<div class="mb-3">
						<label for="password" class="form-label">Password:</label>
						<InputText class="form-control" id="password" @bind-Value="@LoginModel.Password" type="password"
						           autocomplete="new-password" placeholder="Enter your password"></InputText>
						<ValidationMessage For="@(() => LoginModel.Password)"/>
					</div>

					@if (ServerMessage is not null)
					{
						<div class="alert alert-danger" role="alert">
							@ServerMessage
						</div>
					}

					<button type="submit" class="btn btn-primary" aria-label="Login">Login</button>

				</EditForm>
			</NotAuthorized>
		</AuthorizeView>
	</main>


</CascadingAuthenticationState>

@code {
	private LoginModel LoginModel { get; } = new();
	private string? ServerMessage { get; set; }
	private string LoadingOverlayClass = "loading-overlay";

    private void ShowOverlay()
    {
        LoadingOverlayClass = "loading-overlay show";
    }

    private void HideOverlay()
	{
		LoadingOverlayClass = "loading-overlay";
	}

	private async Task HandleSubmitAsync()
	{
		ShowOverlay();
		var user = new LoginUserDto
		{
			UsernameOrMail = LoginModel.Username,
			Password = LoginModel.Password
		};
		ServerMessage = await UserService.LoginUserAsync(user);
		HideOverlay();
	}

}
