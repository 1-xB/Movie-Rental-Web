@page "/movies"
@using MovieRental.Frontend.Components.Pages.LayoutsPages
@using MovieRental.Frontend.Models
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject GenreService GenreService

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<PageTitle>Movies</PageTitle>

<CascadingAuthenticationState>
	<nav>
		<NavMenu></NavMenu>
	</nav>
	<main class="container mt-4">
		<h3>Movies</h3>
		<div class="@LoadingOverlayClass">
			<div class="spinner-border text-light" role="status">
				<span class="sr-only"></span>
			</div>
		</div>

		<div class="container">
			<div class="search-bar">
				<div class="input-group">
					<input aria-describedby="search-addon" aria-label="Search" class="form-control"
					       @oninput="OnSearchInputChanged" placeholder="Search..." type="text">
				</div>
			</div>
		</div>

		<br/>
		<div class="row">
			@if (_movies != null && _genres != null)
			{
				foreach (var movie in _movies)
				{
					if ((!string.IsNullOrEmpty(_searchText) && !movie.Title.ToLower().Contains(_searchText.ToLower())) || movie.AvailableCopies <= 0)
					{
						continue;
					}

					<div class="col-md-4 mb-4 movie" @onclick="() => MovieClicked(movie.Title)">
						<div class="card">
							<div class="card-body">
								@if (!string.IsNullOrEmpty(movie.ImageUrl))
								{
									<img src="@($"{Http.BaseAddress}/{movie.ImageUrl}")" class="card-img-top mb-3" alt="Movie image">
								}
								else
								{
									<img src="https://placehold.co/600x400" class="card-img-top mb-3" alt="Placeholder image">
								}
								<br/>
								<h5 class="card-title">@movie.Title - @movie.ReleaseYear</h5>
								<p class="card-text">
									@if (movie.Description.Length >= 60)
									{
										@movie.Description.Substring(0, 60)
									}
									else
									{
										@movie.Description
									}
									...
								</p>
								<p class="card-text">
									Genre: @_genres.Where(g => g.Id == movie.GenreId).Select(g => g.Name).FirstOrDefault()</p>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</main>
</CascadingAuthenticationState>

@code {
	private List<MovieModel>? _movies;
	private List<GenreModel>? _genres;
	private string? _searchText = string.Empty;
	private string LoadingOverlayClass = "loading-overlay";

	private void ShowOverlay()
	{
		LoadingOverlayClass = "loading-overlay show";
	}

	private void HideOverlay()
	{
		LoadingOverlayClass = "loading-overlay";
	}

	protected override async Task OnInitializedAsync()
	{
		ShowOverlay();
		_movies = await Http.GetFromJsonAsync<List<MovieModel>>("api/movie");
		_genres = await GenreService.GetGenresAsync(Http);
		HideOverlay();
	}

	private void MovieClicked(string title)
	{
		title = title.Replace(" ", "-");
		NavigationManager.NavigateTo($"movies/{title}");
	}

	private void OnSearchInputChanged(ChangeEventArgs e)
	{
		_searchText = e.Value?.ToString();
	}

}
