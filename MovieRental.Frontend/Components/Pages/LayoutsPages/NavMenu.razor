@using System.Security.Claims
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto

<nav class="navbar navbar-expand-lg">
	<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
		<span class="navbar-toggler-icon"></span>
	</button>
	<div class="collapse navbar-collapse justify-content-between" id="navbarNav">
		<ul class="navbar-nav">
			<li class="nav-item">
				<a class="nav-link" href="/">Homepage</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/movies">Movies</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/genres">Genres</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/about">About</a>
			</li>
		</ul>
		<ul class="navbar-nav ml-auto">
			<AuthorizeView Context="authenticationState">
				<Authorized>
					<CascadingValue Value="authenticationState.User">
						@if (authenticationState.User.IsInRole("Admin"))
						{
							<li class="nav-item">
								<a class="nav-link" href="/admin-panel">Admin Panel</a>
							</li>
						}
						<li class="nav-item">
							<a class="nav-link" href="/profile">@authenticationState.User.Identity?.Name</a>
						</li>
						<li class="nav-item">
							<button class="nav-link btn btn-link" @onclick="Logout">Logout</button>
						</li>
					</CascadingValue>
				</Authorized>
				<NotAuthorized>
					<li class="nav-item">
						<a class="nav-link" href="/login">Login</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/register">Register</a>
					</li>
				</NotAuthorized>
			</AuthorizeView>
		</ul>
	</div>
</nav>

@code {
private async Task Logout()
{
await Provider.MarkUserAsLoggedOut();
NavigationManager.NavigateTo(NavigationManager.Uri, true);
StateHasChanged();
}
}
