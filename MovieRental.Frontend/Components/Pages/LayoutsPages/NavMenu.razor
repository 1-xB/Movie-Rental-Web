@using System.Security.Claims
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto

<nav class="navbar navbar-expand-lg">
	<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
		<span class="navbar-toggler-icon"></span>
	</button>
	<div class="collapse navbar-collapse justify-content-between" id="navbarNav">
		<ul class="navbar-nav">
			<li class="nav-item">
				<a class="nav-link" href="/">Homepage</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/movies">Movies</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="/about">About</a>
			</li>
		</ul>
		<ul class="navbar-nav ml-auto">
			<AuthorizeView Context="authenticationState">
				@if (authenticationState.User.Identity?.IsAuthenticated ?? false)
				{
				@if (authenticationState.User.IsInRole("Admin"))
				{
				<li class="nav-item">
					<a class="nav-link" href="/admin-panel">Admin Panel</a>
				</li>
				}
				<li class="nav-item">
					<a class="nav-link" href="/profile">@authenticationState.User.Identity?.Name</a>
                    </li>
                    <li class="nav-item">
					<a class="nav-link" @onclick="Logout">Logout</a>
				</li>
				}
				else
				{
				<li class="nav-item">
					<a class="nav-link" href="/login">Login</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="/register">Register</a>
				</li>
				}
			</AuthorizeView>
		</ul>
	</div>
</nav>

@code {
private async Task Logout()
{
await Provider.MarkUserAsLoggedOut();
NavigationManager.NavigateTo(NavigationManager.Uri, true);
StateHasChanged();
}
}
