@page "/admin-panel/edit-movie/{Id:int}"
@using System.Net
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using MovieRental.Frontend.Components.Pages.LayoutsPages
@using MovieRental.Frontend.Dtos
@using MovieRental.Frontend.Models
@inject MovieService MovieService
@inject HttpClient Http
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ProtectedLocalStorage protectedLocalStorage
@inject NavigationManager navigationManager

<CascadingAuthenticationState>
	<nav>
		<NavMenu></NavMenu>
	</nav>
	<main class="container mt-4">
		<AuthorizeView Policy="AdminOnly">
			<Authorized>
				@if (EditedMovie is null )
				{
					<div class="alert alert-warning" role="alert">
						This movie is not available on our website!
					</div>
				}
				else if (Genres is null)
				{
					<div class="alert alert-warning" role="alert">
						There are no genres available!
					</div>
				}
				else
				{
					<EditForm Model="EditedMovie" OnValidSubmit="HandleValidSubmitAsync" Context="editContext">
						<div class="mb-3">
							<label for="title" class="form-label">Title:</label>
							<InputText class="form-control" id="title" @bind-Value="@EditedMovie.Title"
							           autocomplete="title" placeholder="Enter the title of the movie"></InputText>
							<ValidationMessage For="@(() => EditedMovie.Title)"/>
						</div>

						<div class="mb-3">
							<label for="description" class="form-label">Description:</label>
							<InputText class="form-control" id="description" @bind-Value="@EditedMovie.Description"
							           autocomplete="description"
							           placeholder="Enter the description of the movie"></InputText>
							<ValidationMessage For="@(() => EditedMovie.Description)"/>
						</div>

						<div class="mb-3">
							<label for="price" class="form-label">Price:</label>
							<InputNumber class="form-control" id="price" @bind-Value="@EditedMovie.Price"
							             autocomplete="price"
							             placeholder="Enter the price"></InputNumber>
							<ValidationMessage For="@(() => EditedMovie.Price)"/>
						</div>

						<div class="mb-3">
							<label for="genre" class="form-label">Genre:</label>
							<InputSelect class="form-control" id="genre" @bind-Value="@EditedMovie.GenreId">
								@foreach (var genre in Genres)
								{
									<option value="@genre.Id">@genre.Name</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => EditedMovie.GenreId)"/>
						</div>

						<div class="mb-3">
							<label for="release-year" class="form-label ">Release year:</label>
							<InputDate class="form-control" id="release-year" @bind-Value="@EditedMovie.ReleaseYear"
							           placeholder="Enter the release year of the movie"></InputDate>
							<ValidationMessage For="@(() => EditedMovie.ReleaseYear)"/>
						</div>

						<div class="mb-3">
							<label for="total-copies" class="form-label ">Total Copies:</label>
							<InputNumber class="form-control" id="total-copies" @bind-Value="@EditedMovie.TotalCopies"
							             placeholder="Enter the number of movie copies"></InputNumber>
							<ValidationMessage For="@(() => EditedMovie.TotalCopies)"/>
						</div>

						<div class="mb-3">
							<label for="available-copies" class="form-label ">Available Copies:</label>
							<InputNumber class="form-control" id="available-copies" @bind-Value="@EditedMovie.AvailableCopies"
							             placeholder="Enter the number of movie copies"></InputNumber>
							<ValidationMessage For="@(() => EditedMovie.AvailableCopies)"/>
						</div>

						<div class="mb-3">
							<label for="formFileSm" class="form-label">Image:</label>
							<InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control form-control-sm" id="formFileSm" />
						</div>

						@if (ErrorMessage is not null)
						{
							<div class="alert alert-danger" role="alert">
								@ErrorMessage
							</div>
						}

						<button type="submit" class="btn btn-primary">Edit Movie</button>
					</EditForm>
				}
			</Authorized>
			<NotAuthorized>
				<h1>Access denied!</h1>
				<p>You don't have the necessary permissions to access this page.</p>
			</NotAuthorized>
		</AuthorizeView>
	</main>
</CascadingAuthenticationState>



@code {
	[Parameter] public int Id { get; set; }
	List<GenreModel>? Genres { get; set; } = new();
	EditMovieDto? EditedMovie { get; set; } = new();
	string? ErrorMessage { get; set; }
	IBrowserFile? SelectedFile { get; set; }

	protected override async Task OnInitializedAsync()
	{
		EditedMovie = await MovieService.GetMovieByIdAsync(Http, Id);
		Genres = await GenreService.GetGenresAsync(Http);
	}

	private async Task HandleValidSubmitAsync()
	{
		ErrorMessage = null;

		var accessToken = await protectedLocalStorage.GetAsync<string>("accessToken");
		if (string.IsNullOrEmpty(accessToken.Value))
		{
			ErrorMessage = "Access token is null or empty.";
			return;
		}
		await HandleFileUpload();
		var request = new HttpRequestMessage(HttpMethod.Put, "/api/movie/" + EditedMovie.Id)
		{
			Content = new StringContent(JsonSerializer.Serialize(EditedMovie), Encoding.UTF8, "application/json")
		};
		request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken.Value);

		var response = await Http.SendAsync(request);

		if (response.StatusCode == HttpStatusCode.OK)
		{
			navigationManager.NavigateTo("/movies");
		}
		else
		{
			ErrorMessage = "Error: " + await response.Content.ReadAsStringAsync();
		}
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		SelectedFile = e.File;
		await HandleFileUpload();
	}

	private async Task HandleFileUpload()
	{
		if (SelectedFile == null) return;

		using var stream = new MemoryStream();
		await SelectedFile.OpenReadStream(10 * 1024 * 1024).CopyToAsync(stream);
		var bytes = stream.ToArray();
		EditedMovie.ImageBase64 = Convert.ToBase64String(bytes);
		EditedMovie.ImageType = SelectedFile.ContentType;
		EditedMovie.ImageName = SelectedFile.Name;
	}
}
