@page "/admin-panel/add-user"
@using MovieRental.Frontend.Components.Pages.LayoutsPages
@using MovieRental.Frontend.Dtos
@inject UserService UserService
@rendermode InteractiveServer

<CascadingAuthenticationState>
	<nav>
		<NavMenu></NavMenu>
	</nav>
	<main class="container mt-4">
		<AuthorizeView Policy="AdminOnly">
			<Authorized>
				<EditForm Model="@NewUser" OnValidSubmit="@HandleSubmitAsync" Context="editContext">
					<DataAnnotationsValidator></DataAnnotationsValidator>
					<ValidationSummary></ValidationSummary>

					<div class="mb-3">
						<label for="username" class="form-label">Username:</label>
						<InputText class="form-control" id="username" @bind-Value="@NewUser.Username"
						           autocomplete="username" placeholder="Enter your username"></InputText>
						<ValidationMessage For="@(() => NewUser.Username)"/>
					</div>

					<div class="mb-3">
						<label for="email" class="form-label">Email:</label>
						<InputText class="form-control" id="email" @bind-Value="@NewUser.Mail" type="email"
						           aria-describedby="emailHelp" autocomplete="email"
						           placeholder="Enter your email"></InputText>
						<ValidationMessage For="@(() => NewUser.Mail)"/>
						<div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
					</div>

					<div class="mb-3">
						<InputText class="form-control" id="password" @bind-Value="@NewUser.Password" type="password"
						           autocomplete="new-password" placeholder="Enter your password"></InputText>
						<ValidationMessage For="@(() => NewUser.Password)"/>
					</div>

					@if (ServerMessage is not null)
					{
						<div class="alert alert-danger" role="alert">
							@ServerMessage
						</div>
					}

					<button type="submit" class="btn btn-primary" aria-label="Register">Add user</button>

				</EditForm>
			</Authorized>
			<NotAuthorized>
				<h1>Access denied!</h1>
				<p>You don't have the necessary permissions to access this page.</p>
			</NotAuthorized>
		</AuthorizeView>
	</main>
</CascadingAuthenticationState>

@code {

	private AddUserDto NewUser { get; } = new()
	{
		Username = null,
		Mail = null,
		Password = null
	};

	private string? ServerMessage { get; set; }

	private async Task HandleSubmitAsync()
	{
		try
		{
			var user = new RegisterUserDto
			{
				Username = NewUser.Username,
				Mail = NewUser.Mail,
				Password = NewUser.Password
			};
			ServerMessage = await UserService.RegisterUserAsync(user);
		}
		catch (Exception ex)
		{
			ServerMessage = $"An error occurred : {ex.Message}";
		}
	}

}
